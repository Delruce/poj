// Memory: 156K; Time: 16ms; Code Length: 3611B

#include <stdio.h>

int main(void)
{
    char s[6];          // input as string
    int r;              // power

    int o[6];           // input as int array
    int m[150];         // multiplicative identity
    int a[150];         // additive identity

    int i,j,k;

    int digit,digit2;
    
    // main loop
    while (scanf("%s%d",&s,&r)!=EOF)
    {
    
        // figure out the digit position of dot
        digit = -1;

        for (i=5; i>=0; i--)
        {
            if (s[i]=='.')
            digit = i;
        }

        // if s is an integer with dot
        i=5;
        while (s[i]=='0')
        {
            i=i-1;
        }

        if (s[i]=='.')
        {
            for (j=i-1; j>=0; j--)
            {
                s[5+j-(i-1)] = s[j];
            }

            for (j=5-i; j>=0; j--)
            {
                s[j] = '0';
            }

            digit = -1;
        }
        else
        {
            i=i+1;

            for (j=i-1; j>=0; j--)
            {
                s[5+j-(i-1)] = s[j];
            }

            for (j=5-i; j>=0; j--)
            {
                s[j] = '0';
            }

            for (i=5; i>=0; i--)
            {
                if (s[i]=='.')
                    digit = i;
            }
        }

        if (digit!=-1)
        {
            for (i=digit; i>=0; i--)
            {
                s[i] = s[i-1];
            }
            s[0] = '0';

            digit = 5 - digit;
            digit2 = digit * r;
        }

        // initialize the factor
        for (i=0; i<6; i++)
        {
            o[i] = s[i]-'0';
        }

        // initialize identities
        for (i=0; i<149; i++)
        {
            m[i] = 0;
            a[i] = 0;
        }
        m[149] = 1;
        a[149] = 0;

        // do elementary school student
        for (i=0; i<r; i++)
        {
            // iterate digits of the factor
            for (j=5; j>=0; j--)
            {
                // iterate digits of multiplicative identity
                for (k=149; k>=0; k--)
                {
                    if (k+j-5>=0)
                    {
                        a[k+j-5] = a[k+j-5] + m[k] * o[j];
                    }
                }

                // jin wei
                for (k=149; k>=0; k--)
                {
                    a[k-1] = a[k-1] + a[k] / 10;
                    a[k] = a[k] % 10;
                }
            }

            for (j=0; j<150; j++)
            {
                m[j] = a[j];
            }

            // free a
            for (j=0; j<150; j++)
            {
                a[j] = 0;
            }
        }


        if (digit!=-1)
            {
                digit2 = 149 - digit2;
                for (i=0; i<digit2; i++)
                {
                    m[i] = m[i+1];
                }
                m[digit2] = -1;

                j=0;
                while (m[j]==0)
                {
                    j = j+1;
                }

                k=149;
                while (m[k]==0)
                {
                    k = k-1;
                }

                for (i=j; i<=k; i++)
                {
                    if (m[i]==-1)
                        printf(".");
                    else 
                        printf("%d",m[i]);
                }
                printf("\n");
            }
        else
        {
            j=0;
            while (m[j]==0)
            {
                j = j+1;
            }

            for (i=j; i<150; i++)
                {
                    printf("%d",m[i]);
                }
            printf("\n");
        }
    
    }
    return 0;
}
